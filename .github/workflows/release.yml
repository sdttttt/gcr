name: Release

on:
  push:
    tags: 
      - 'v**'

env:
  CARGO_TERM_COLOR: always

jobs:
  
  create:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    
    - uses: actions/checkout@v2
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ### Add
          - none
          ### Fix
          - none
          ### Change
          - none
        draft: false
        prerelease: false
  
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
  
      - name: Publish to crates.io
        run: |
          cargo login ${{ env.CARGO_LOGIN_TOKEN }}
          make publish
        env:
          CARGO_LOGIN_TOKEN: ${{ secrets.CARGO_LOGIN_TOKEN }}
  
  upload:
    
    needs: [ create ]
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    
    - uses: actions/cache@v2
      if: ${{ runner.os != 'Windows' }}
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - uses: actions/cache@v2
      if: ${{ runner.os == 'Windows' }}
      with:
        path: |
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  
    - name: Build on UNIX
      if: ${{ runner.os != 'Windows' }}
      run: |
        cargo build --release --verbose
        zip --junk-paths grc.zip ./target/release/grc

    - name: Build on Windows
      if: ${{ runner.os == 'Windows' }}
      run: |
        cargo build --release --verbose
        makecab .\target\release\grc.exe grc.zip
  
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: grc-${{ runner.os }}
        path: grc.zip

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
         # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        upload_url: ${{ needs.create.outputs.upload_url }}
        asset_path: grc.zip
        asset_name: grc-${{ runner.os }}.zip
        asset_content_type: application/zip
